name: Release to PyPI (all CRISP-DM packages)

on:
  push:
    tags:
      - "v*.*.*"   # p.ej. v1.2.0

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg:
          - business_understanding
          - data_understanding
          - data_preparation
          - modeling
          - evaluation
          - deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install build & twine
        run: |
          python -m pip install -U pip
          pip install build twine packaging tomli

      # Sanity check inicial (antes de tocar versión)
      - name: Validate name/version (pre)
        working-directory: CRISP-DM/${{ matrix.pkg }}
        run: |
          python - <<'PY'
          import sys, pathlib, tomli
          from packaging.version import Version
          data = tomli.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf8"))
          proj = data.get("project", {})
          name = proj.get("name"); ver = proj.get("version")
          if not name: sys.exit("ERROR: [project].name vacío")
          if not ver:  sys.exit("ERROR: [project].version vacío")
          Version(ver)  # valida PEP440
          print(f"OK (pre) -> {name} {ver}")
          PY

      # Estampa la versión desde el tag: vX.Y.Z → X.Y.Z
      - name: Set version from tag (replace or insert)
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: CRISP-DM/${{ matrix.pkg }}
        env:
          TAG: ${{ github.ref_name }}   # ej. v1.2.0
        run: |
          python - <<'PY'
          import os, re, pathlib, sys
          tag = os.getenv("TAG","")
          if not tag.startswith("v") or len(tag) < 2:
              print("No hay tag semántico, no se modifica versión."); sys.exit(0)
          v = tag[1:]  # 'v1.2.3' -> '1.2.3'
          p = pathlib.Path("pyproject.toml")
          s = p.read_text(encoding="utf8")
          if re.search(r'(?m)^\s*version\s*=\s*".*?"\s*$', s):
              s = re.sub(r'(?m)^\s*version\s*=\s*".*?"\s*$', f'version = "{v}"', s, count=1)
          else:
              s = re.sub(r'(?m)^\[project\]\s*$', f'[project]\nversion = "{v}"', s, count=1)
          p.write_text(s, encoding="utf8")
          print("Stamped version:", v, "in", p)
          PY

      # Validación final (detiene si quedó mal)
      - name: Validate name/version (post)
        working-directory: CRISP-DM/${{ matrix.pkg }}
        run: |
          python - <<'PY'
          import sys, pathlib, tomli
          from packaging.version import Version
          data = tomli.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf8"))
          proj = data.get("project", {})
          name = proj.get("name"); ver = proj.get("version")
          if not name: sys.exit("ERROR: [project].name vacío (post)")
          if not ver:  sys.exit("ERROR: [project].version vacío (post)")
          Version(ver)
          print(f"OK (post) -> {name} {ver}")
          PY

      - name: Build sdist & wheel
        working-directory: CRISP-DM/${{ matrix.pkg }}
        run: |
          python -m build
          python -m twine check dist/*

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload CRISP-DM/${{ matrix.pkg }}/dist/*
